{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "admin_address",
    "bonding_duration",
    "club_fee_collector_wallet",
    "club_price",
    "club_reward_next_timestamp",
    "control_fees",
    "fury_token_address",
    "max_bonding_limit_per_user",
    "owner_release_locking_duration",
    "platform_fees",
    "platform_fees_collector_wallet",
    "pool_address",
    "reward_periodicity",
    "transaction_fees",
    "usdc_ibc_symbol"
  ],
  "properties": {
    "admin_address": {
      "description": "Administrator privilege wallet address",
      "type": "string"
    },
    "bonding_duration": {
      "description": "Bonding duration (in seconds) applicable when Un-staking is initiated",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "club_fee_collector_wallet": {
      "description": "Wallet where the Club Fee from Buy a Club is transferred",
      "type": "string"
    },
    "club_price": {
      "description": "Price in Fury for Buying a Club",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "club_reward_next_timestamp": {
      "description": "Next timestamp when the next reward distribution shall take place",
      "allOf": [
        {
          "$ref": "#/definitions/Timestamp"
        }
      ]
    },
    "control_fees": {
      "description": "Control Fee Specified in percentage multiplied by 100, i.e. 100% = 10000 and 0.01% = 1",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "fury_token_address": {
      "description": "Fury Token Miniting Contract address",
      "type": "string"
    },
    "max_bonding_limit_per_user": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "owner_release_locking_duration": {
      "description": "Duration (in seconds) for which a club is released by an Owner for potential Buy a Club by a new owner",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "platform_fees": {
      "description": "Plastform Fee Specified in percentage multiplied by 100, i.e. 100% = 10000 and 0.01% = 1",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "platform_fees_collector_wallet": {
      "description": "Wallet where Platform Fees (other than the fee used towards Swap) would transfered",
      "type": "string"
    },
    "pool_address": {
      "description": "Proxy Contract for Astroport Liquidity Pool",
      "type": "string"
    },
    "reward_periodicity": {
      "description": "Periodicity for reward distribution (in seconds)",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "transaction_fees": {
      "description": "Transaction Fee Specified in percentage multiplied by 100, i.e. 100% = 10000 and 0.01% = 1",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "usdc_ibc_symbol": {
      "type": "string"
    }
  },
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
